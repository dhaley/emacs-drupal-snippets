# -*- mode: snippet -*-
# name: hook_filter_FILTER_process
# key: hook_filter_FILTER_process
# --
/**
 * ${2:Process callback for hook_filter_info().
 *
 * Note: This is not really a hook. The function name is manually specified via
 * 'process callback' in hook_filter_info(), with this recommended callback
 * name pattern. It is called from check_markup().
 *
 * See hook_filter_info() for a description of the filtering process. This step
 * is where the filter actually transforms the text.
 *}
 * @param $text
 *   The text string to be filtered.
 * @param $filter
 *   The filter object containing settings for the given format.
 * @param $format
 *   The text format object assigned to the text to be filtered.
 * @param $langcode
 *   The language code of the text to be filtered.
 * @param $cache
 *   A Boolean indicating whether the filtered text is going to be cached in
 *   {cache_filter}.
 * @param $cache_id
 *   The ID of the filtered text in {cache_filter}, if $cache is TRUE.
 *
 * @return
 *   The filtered text.
 */
function ${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`}_filter_FILTER_process($text, $filter, $format, $langcode, $cache, $cache_id) {
$0  $text = preg_replace('|\[codefilter_code\](.+?)\[/codefilter_code\]|se', "<pre>$1</pre>", $text);

  return $text;
}
