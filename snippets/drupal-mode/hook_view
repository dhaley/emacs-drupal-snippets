# -*- mode: snippet -*-
# name: hook_view
# key: hook_view
# --
/**
 * ${2:Display a node.
 *
 * This hook is invoked only on the module that defines the node's content type
 * (use hook_node_view() to act on all node views).
 *
 * This hook is invoked during node viewing after the node is fully loaded,
 * so that the node type module can define a custom method for display, or
 * add to the default display.
 *}
 * @param $node
 *   The node to be displayed, as returned by node_load().
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser', ...
 * @return
 *   $node. The passed $node parameter should be modified as necessary and
 *   returned so it can be properly presented. Nodes are prepared for display
 *   by assembling a structured array, formatted as in the Form API, in
 *   $node->content. As with Form API arrays, the #weight property can be
 *   used to control the relative positions of added elements. After this
 *   hook is invoked, node_view() calls field_attach_view() to add field
 *   views to $node->content, and then invokes hook_node_view() and
 *   hook_node_view_alter(), so if you want to affect the final
 *   view of the node, you might consider implementing one of these hooks
 *   instead.
 *
 * @ingroup node_api_hooks
 */
function ${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`}_view($node, $view_mode) {
$0  if ($view_mode == 'full' && node_is_page($node)) {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Example'), 'example');
    $breadcrumb[] = l($node->field1, 'example/' . $node->field1);
    drupal_set_breadcrumb($breadcrumb);
  }

  $node->content['myfield'] = array(
    '#markup' => theme('mymodule_myfield', $node->myfield),
    '#weight' => 1,
  );

  return $node;
}
