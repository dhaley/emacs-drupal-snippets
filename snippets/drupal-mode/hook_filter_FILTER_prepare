# -*- mode: snippet -*-
# name: hook_filter_FILTER_prepare
# key: hook_filter_FILTER_prepare
# --
/**
 * ${2:Prepare callback for hook_filter_info().
 *
 * Note: This is not really a hook. The function name is manually specified via
 * 'prepare callback' in hook_filter_info(), with this recommended callback
 * name pattern. It is called from check_markup().
 *
 * See hook_filter_info() for a description of the filtering process. Filters
 * should not use the 'prepare callback' step for anything other than escaping,
 * because that would short-circuit the control the user has over the order in
 * which filters are applied.
 *}
 * @param $text
 *   The text string to be filtered.
 * @param $filter
 *   The filter object containing settings for the given format.
 * @param $format
 *   The text format object assigned to the text to be filtered.
 * @param $langcode
 *   The language code of the text to be filtered.
 * @param $cache
 *   A Boolean indicating whether the filtered text is going to be cached in
 *   {cache_filter}.
 * @param $cache_id
 *   The ID of the filtered text in {cache_filter}, if $cache is TRUE.
 *
 * @return
 *   The prepared, escaped text.
 */
function ${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`}_filter_FILTER_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
$0  // Escape <code> and </code> tags.
  $text = preg_replace('|<code>(.+?)</code>|se', "[codefilter_code]$1[/codefilter_code]", $text);
  return $text;
}
